# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ExamWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import QTimer, QTime
from PyQt5.QtWidgets import QDialog
from UserNameDialog import *
from Main import *


class MyDialog(QDialog, Ui_user_input_dialog):
    def __init__(self):
        super(MyDialog, self).__init__()
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.user_input)
        self.buttonBox.rejected.connect(self.cancel_input)

    def user_input(self):
        self.exec_()
        return self.user_name_edit.text()

    def cancel_input(self):
        self.close()


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(942, 501)
        font = QtGui.QFont()
        font.setPointSize(12)
        Form.setFont(font)
        self.QuestionsText = QtWidgets.QPlainTextEdit(Form)
        self.QuestionsText.setGeometry(QtCore.QRect(10, 70, 921, 251))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.QuestionsText.setFont(font)
        self.QuestionsText.setObjectName("QuestionsText")
        self.QuestionLabel = QtWidgets.QLabel(Form)
        self.QuestionLabel.setGeometry(QtCore.QRect(30, 20, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.QuestionLabel.setFont(font)
        self.QuestionLabel.setObjectName("QuestionLabel")
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(530, 460, 401, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.TimerLabel = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TimerLabel.setFont(font)
        self.TimerLabel.setObjectName("TimerLabel")
        self.horizontalLayout.addWidget(self.TimerLabel)
        self.lcd_time = QtWidgets.QLCDNumber(self.horizontalLayoutWidget)
        self.lcd_time.setObjectName("lcd_time")
        self.horizontalLayout.addWidget(self.lcd_time)
        self.horizontalLayout.setStretch(1, 2)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(550, 350, 381, 71))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.BtnNext = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.BtnNext.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.BtnNext.setFont(font)
        self.BtnNext.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.BtnNext.setStyleSheet("QPushButton {\n"
                                   "    border: 2px solid #8f8f91;\n"
                                   "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                   "                                      stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
                                   "    min-width: 80px;\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton:pressed {\n"
                                   "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                   "                                      stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "\n"
                                   "QPushButton:default {\n"
                                   "    border-color: navy; /* make the default button prominent */\n"
                                   "}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../arrow_prev.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BtnNext.setIcon(icon)
        self.BtnNext.setIconSize(QtCore.QSize(50, 20))
        self.BtnNext.setAutoDefault(False)
        self.BtnNext.setDefault(True)
        self.BtnNext.setFlat(False)
        self.BtnNext.setObjectName("BtnNext")
        self.horizontalLayout_2.addWidget(self.BtnNext)
        self.BtnPrev = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BtnPrev.sizePolicy().hasHeightForWidth())
        self.BtnPrev.setSizePolicy(sizePolicy)
        self.BtnPrev.setMinimumSize(QtCore.QSize(84, 0))
        self.BtnPrev.setMaximumSize(QtCore.QSize(16777215, 40))
        self.BtnPrev.setSizeIncrement(QtCore.QSize(0, 0))
        self.BtnPrev.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.BtnPrev.setFont(font)
        self.BtnPrev.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.BtnPrev.setStyleSheet("QPushButton {\n"
                                   "    border: 2px solid #8f8f91;\n"
                                   "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                   "                                      stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
                                   "    min-width: 80px;\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton:pressed {\n"
                                   "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                   "                                      stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "\n"
                                   "QPushButton:default {\n"
                                   "    border-color: navy; /* make the default button prominent */\n"
                                   "}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../arrow-blue-png-6-min.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BtnPrev.setIcon(icon1)
        self.BtnPrev.setIconSize(QtCore.QSize(50, 20))
        self.BtnPrev.setDefault(True)
        self.BtnPrev.setObjectName("BtnPrev")
        self.horizontalLayout_2.addWidget(self.BtnPrev)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 350, 341, 71))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.AnswerLineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.AnswerLineEdit.setMaximumSize(QtCore.QSize(180, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.AnswerLineEdit.setFont(font)
        self.AnswerLineEdit.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.AnswerLineEdit.setObjectName("AnswerLineEdit")
        self.horizontalLayout_3.addWidget(self.AnswerLineEdit)
        self.BtnSave = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BtnSave.sizePolicy().hasHeightForWidth())
        self.BtnSave.setSizePolicy(sizePolicy)
        self.BtnSave.setMinimumSize(QtCore.QSize(84, 0))
        self.BtnSave.setMaximumSize(QtCore.QSize(200, 40))
        self.BtnSave.setSizeIncrement(QtCore.QSize(0, 0))
        self.BtnSave.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.BtnSave.setFont(font)
        self.BtnSave.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.BtnSave.setStyleSheet("QPushButton {\n"
                                   "    border: 2px solid #8f8f91;\n"
                                   "    border-radius: 6px;\n"
                                   "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                   "                                      stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
                                   "    min-width: 80px;\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton:pressed {\n"
                                   "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                   "                                      stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "\n"
                                   "QPushButton:default {\n"
                                   "    border-color: navy; /* make the default button prominent */\n"
                                   "}")
        self.BtnSave.setIconSize(QtCore.QSize(50, 20))
        self.BtnSave.setDefault(True)
        self.BtnSave.setObjectName("BtnSave")
        self.horizontalLayout_3.addWidget(self.BtnSave)
        self.BtnEnd = QtWidgets.QPushButton(Form)
        self.BtnEnd.setGeometry(QtCore.QRect(740, 20, 186, 40))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BtnEnd.sizePolicy().hasHeightForWidth())
        self.BtnEnd.setSizePolicy(sizePolicy)
        self.BtnEnd.setMinimumSize(QtCore.QSize(84, 0))
        self.BtnEnd.setMaximumSize(QtCore.QSize(16777215, 40))
        self.BtnEnd.setSizeIncrement(QtCore.QSize(0, 0))
        self.BtnEnd.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.BtnEnd.setFont(font)
        self.BtnEnd.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.BtnEnd.setStyleSheet("QPushButton {\n"
                                  "    border: 2px solid #8f8f91;\n"
                                  "    border-radius: 6px;\n"
                                  "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                  "                                      stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
                                  "    min-width: 80px;\n"
                                  "}\n"
                                  "\n"
                                  "QPushButton:pressed {\n"
                                  "    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                  "                                      stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
                                  "}\n"
                                  "\n"
                                  "\n"
                                  "\n"
                                  "QPushButton:default {\n"
                                  "    border-color: navy; /* make the default button prominent */\n"
                                  "}")
        self.BtnEnd.setIconSize(QtCore.QSize(50, 20))
        self.BtnEnd.setDefault(True)
        self.BtnEnd.setObjectName("BtnEnd")
        self.ExamProgress = QtWidgets.QProgressBar(Form)
        self.ExamProgress.setGeometry(QtCore.QRect(10, 460, 161, 31))
        self.ExamProgress.setProperty("value", 0)
        self.ExamProgress.setObjectName("ExamProgress")

        self.retranslateUi(Form)
        self.BtnEnd.clicked.connect(self.end_of_exam)
        self.BtnNext.clicked.connect(self.next_question)
        self.BtnPrev.clicked.connect(self.prev_question)
        self.BtnSave.clicked.connect(self.save_answer)
        self.exam_prepare()
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Тестирование 23 задание ЕГЭ информатика"))
        self.QuestionLabel.setText(_translate("Form", "Вопрос №"))
        self.TimerLabel.setText(_translate("Form", "Таймер тестирования:"))
        self.BtnNext.setText(_translate("Form", "Следующий"))
        self.BtnPrev.setText(_translate("Form", "Предыдущий"))
        self.label_3.setText(_translate("Form", "Ответ"))
        self.BtnSave.setText(_translate("Form", "Сохранить"))
        self.BtnEnd.setText(_translate("Form", "Закончить тестирование"))

    def exam_prepare(self):
        self.user_name = MyDialog().user_input()
        if not self.user_name:
            self.user_name = 'Аноним'
        self.results = get_questions()
        self.timer = QTimer()
        self.current_time = QTime(0, 30, 00)
        self.timer.timeout.connect(self.showTime)
        self.timer.start(1000)
        self.lcd_time.display(self.current_time.toString())
        self.ExamProgress.setValue(0)
        self.format_questions = []
        self.right_answers = {}
        self.user_answers = {}
        for number, el  in enumerate(self.results):
            format_question = el[1].split('|')
            format_question = '\n'.join(format_question)
            self.format_questions.append((format_question, el[0]))
            self.right_answers[number] = el[0], el[2]
        print(self.right_answers)
        self.update_form()

    def showTime(self):
        if self.current_time > QTime(0,0,0):
            self.current_time = self.current_time.addSecs(-1)
            self.lcd_time.display(self.current_time.toString())
        else:
            print('Время вышло')
            self.timer.stop()
            self.time_out()

    def update_form(self, text=''):
        self.QuestionLabel.setText('Вопрос № ' + str(question_number + 1))
        self.QuestionsText.clear()
        self.AnswerLineEdit.setText(text)
        self.QuestionsText.appendPlainText(self.format_questions[question_number][0])


    def next_question(self):
        global question_number
        if question_number < 9:
            question_number += 1
        if question_number in self.user_answers:
            self.AnswerLineEdit.setText(str(self.user_answers[question_number][1]))
            self.update_form(str(self.user_answers[question_number][1]))
        else:
            self.update_form()

    def prev_question(self):
        global question_number
        if question_number > 0:
            question_number -= 1
        if question_number in self.user_answers:
            self.AnswerLineEdit.setText(str(self.user_answers[question_number][1]))
            self.update_form(str(self.user_answers[question_number][1]))
        else:
            self.update_form()

    def save_answer(self):
        try:
           int(self.AnswerLineEdit.text())
        except:
            QtWidgets.QMessageBox.critical(None,'Ошибка ввода','В поле ответа вводится только числа!',
                                           QtWidgets.QMessageBox.Ok)
            return None
        if question_number not in self.user_answers:
            self.user_answers[question_number] = \
                self.format_questions[question_number][1], int(self.AnswerLineEdit.text())
            self.ExamProgress.setValue(self.ExamProgress.value() + 10)
        else:
            self.user_answers[question_number] = \
                self.format_questions[question_number][1], int(self.AnswerLineEdit.text())
        print(self.user_answers)

    def time_out(self):
        self.timer.stop()
        QtWidgets.QMessageBox.critical(None, 'Время истекло!',
                                       'Время, отведенное на выполнение заданий истекло!',
                                       QtWidgets.QMessageBox.Ok)
        self.BtnSave.setDisabled(True)
        self.AnswerLineEdit.setDisabled(True)


    def end_of_exam(self):
        self.timer.stop()
        exam_time = self.current_time.elapsed()
        print(exam_time)
        # exam_results = []
        # for ind, answer in self.user_answers.items():
        #     if self.user_answers[ind] == self.right_answers[ind]:
        #         exam_results.append(10)
        #     else:
        #         exam_results.append(0)
        # self.con = sqlite3.connect('EGE23.db')
        # cur = self.con.cursor()
        # cur.execute(''' SELECT Id FROM Users WHERE Name=? ''',  (self.user_name,))
        # users = cur.fetchall()
        # if not users:
        #     sql_query = """INSERT INTO Users (Name) VALUES
        #                                    (?);"""
        #     data = (self.user_name,)
        #     cur.execute(sql_query, data)
        #     self.con.commit()
        # else:
        #     user_id = users[0][0]
        # sql_query = """INSERT INTO Results (User_id, Result, DateOfExam, ExamTime) VALUES
        #                                 (?, ?, ?, ?);"""
        # result = sum(exam_results)
        # exam_date = datetime.today().strftime('%d/%m/%Y')
        #
        # data = (user_id, result, exam_date, exam_time)
        # cur.execute(sql_query, data)
        # self.con.commit()
        # cur.close()


